/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.read;

import view.update.Atualizavel;
import view.update.EditarPessoaView;
import view.create.VincularMoradorView;
import controller.MoradorController;
import controller.PessoaController;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Pessoa;

/**
 *
 * @author vinic
 */
public class MoradorView extends javax.swing.JFrame implements Atualizavel{
    private MoradorController controller;
    private PessoaController pessoaController;

    public MoradorView() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setTitle("Consulta de Moradores");
        this.pessoaController = new PessoaController();
        this.controller = new MoradorController();
        carregarDados();
    }
    
    @Override
    public void carregarDados() {
        try {
            List<Map<String, Object>> lista = controller.listarMoradoresComDetalhes();

            String[] colunas = {
                "ID Morador", "ID Vínculo", "Nome", "CPF", "RG", "Idade",
                "Endereço", "Data de Vínculo", "Responsável"
            };
            DefaultTableModel modelo = new DefaultTableModel(colunas, 0);

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

            // Usando lambda para iterar a lista
            lista.forEach(item -> {
                LocalDate dataNasc = (LocalDate) item.get("data_nasc");
                long idade = dataNasc != null
                    ? ChronoUnit.YEARS.between(dataNasc, LocalDate.now())
                    : 0;

                LocalDate dataVinculo = (LocalDate) item.get("data_vinculo");

                String endereco = item.get("rua") != null
                    ? item.get("rua") + ", " + item.get("numero")
                    : "Sem residência";

                modelo.addRow(new Object[]{
                    item.get("id_morador"),
                    item.get("id_vinculo"),
                    item.get("nome"),
                    item.get("cpf"),
                    item.get("rg"),
                    idade,
                    endereco,
                    dataVinculo != null ? formatter.format(dataVinculo) : "",
                    (Boolean) item.get("responsavel") ? "Sim" : "Não"
                });
            });

            tblMorador.setModel(modelo);

            // Ocultar colunas ID Morador (0) e ID Vínculo (1)
            for (int i : new int[]{0, 1}) {
                tblMorador.getColumnModel().getColumn(i).setMinWidth(0);
                tblMorador.getColumnModel().getColumn(i).setMaxWidth(0);
                tblMorador.getColumnModel().getColumn(i).setWidth(0);
                tblMorador.getColumnModel().getColumn(i).setPreferredWidth(0);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMorador = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnVincularResidencia = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        btnDeletarResidencia = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(242, 245, 247));

        tblMorador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Morador", "ID Vínculo", "Nome", "CPF", "RG", "Idade", "Data de Cadastro", "Endereço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMorador);

        btnEditar.setFont(new java.awt.Font("Sans Serif Collection", 1, 14)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(66, 66, 66));
        btnEditar.setText("Editar");
        btnEditar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(110, 158, 158), 3, true));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnVincularResidencia.setFont(new java.awt.Font("Sans Serif Collection", 1, 14)); // NOI18N
        btnVincularResidencia.setForeground(new java.awt.Color(66, 66, 66));
        btnVincularResidencia.setText("Alterar residência");
        btnVincularResidencia.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(110, 158, 158), 3, true));
        btnVincularResidencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVincularResidenciaActionPerformed(evt);
            }
        });

        btnDeletar.setFont(new java.awt.Font("Sans Serif Collection", 1, 14)); // NOI18N
        btnDeletar.setForeground(new java.awt.Color(66, 66, 66));
        btnDeletar.setText("Excluir");
        btnDeletar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(110, 158, 158), 3, true));
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });

        btnDeletarResidencia.setFont(new java.awt.Font("Sans Serif Collection", 1, 14)); // NOI18N
        btnDeletarResidencia.setForeground(new java.awt.Color(66, 66, 66));
        btnDeletarResidencia.setText("Remover residência");
        btnDeletarResidencia.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(110, 158, 158), 3, true));
        btnDeletarResidencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarResidenciaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(66, 66, 66));
        jLabel1.setText("Moradores");
        jLabel1.setAlignmentY(0.0F);

        jButton1.setFont(new java.awt.Font("Sans Serif Collection", 1, 12)); // NOI18N
        jButton1.setText("Voltar");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(110, 158, 158), 3, true));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(337, 337, 337)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnVincularResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeletarResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletarResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVincularResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int linhaSelecionada = tblMorador.getSelectedRow();
        if (linhaSelecionada >= 0) {
            int idMorador = (int) tblMorador.getValueAt(linhaSelecionada, 0); // assumindo que o ID do morador está na coluna 0

            try {
                Pessoa pessoa = pessoaController.buscarPessoaPorIdMorador(idMorador);
                if (pessoa != null) {
                    EditarPessoaView tela = new EditarPessoaView(pessoa, this);
                    tela.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Pessoa não encontrada para esse morador.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao buscar pessoa: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um morador na tabela.", "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        int linhaSelecionada = tblMorador.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um morador para excluir.");
            return;
        }

        int idMorador = (int) tblMorador.getValueAt(linhaSelecionada, 0); // ID Morador

        int opcao = JOptionPane.showConfirmDialog(this,
                "Deseja realmente excluir este morador? Isso removerá também os dados pessoais, se ele não for proprietário.",
                "Confirmação",
                JOptionPane.YES_NO_OPTION);

        if (opcao == JOptionPane.YES_OPTION) {
            Runnable acaoExcluir = () -> {
                try {
                    int idPessoa = controller.buscarIdPessoaPorIdMorador(idMorador);
                    boolean ehProprietario = controller.pessoaJaEhProprietario(idPessoa);

                    controller.deletarMorador(idMorador);

                    if (ehProprietario) {
                        JOptionPane.showMessageDialog(this, "Morador excluído, mas os dados pessoais foram mantidos, pois ele é proprietário.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Morador e dados pessoais excluídos com sucesso.");
                    }

                    carregarDados();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao excluir: " + ex.getMessage());
                    ex.printStackTrace();
                }
            };

            acaoExcluir.run();
        }
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnDeletarResidenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarResidenciaActionPerformed
        int linhaSelecionada = tblMorador.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma residência para desvincular.");
            return;
        }

        int idVinculo = (int) tblMorador.getValueAt(linhaSelecionada, 1); // coluna ID Vínculo

        int confirm = JOptionPane.showConfirmDialog(this, 
            "Deseja realmente desvincular este morador da residência?", 
            "Confirmação", 
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                controller.desvincularResidencia(idVinculo);
                JOptionPane.showMessageDialog(this, "Vínculo removido com sucesso.");
                carregarDados();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao desvincular: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnDeletarResidenciaActionPerformed

    private void btnVincularResidenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVincularResidenciaActionPerformed
        int linhaSelecionada = tblMorador.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um morador na tabela.");
            return;
        }

        // Como as colunas ID Morador e ID Vínculo estão ocultas, mas existem no modelo
        // Pegamos o modelo da tabela e acessamos os dados da linha selecionada, coluna 0 = idMorador
        int idMorador = (int) tblMorador.getModel().getValueAt(linhaSelecionada, 0);

        // Abre a tela de cadastro/edição passando a referência dessa view e o id do morador
        VincularMoradorView cadastroMoradorView = new VincularMoradorView(this, idMorador);
        cadastroMoradorView.setVisible(true);
    }//GEN-LAST:event_btnVincularResidenciaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoradorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoradorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoradorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoradorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MoradorView().setVisible(true)); // Refatorado para lambda
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnDeletarResidencia;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnVincularResidencia;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMorador;
    // End of variables declaration//GEN-END:variables
}
